function movie_diffusion(obst,obst_cen_rec,tracer,tracer_cen_rec,const,n,timestep,filename)

%video writer stuff
writerObj = VideoWriter(filename,'Motion JPEG AVI');
writerObj.FrameRate = 10;
open(writerObj);

ngridpoints=const.n_gridpoints;

%set up figure
set(0,'DefaultFigureWindowStyle','normal');
hfig=figure('units','inches','Position',[3 3 6 6]);
ax=gca;axis square;ax.XGrid='on';ax.YGrid='on';
ax.XLim=[0.5 ngridpoints+0.5];ax.YLim=[0.5 ngridpoints+0.5];
ax.XTick=[0:ceil(ngridpoints/20):ngridpoints];
ax.YTick=ax.XTick;
ax.XLabel.String='x position';ax.YLabel.String='y position';
ax.FontSize=14; 

%initial drawing
for i=1:n.obst %loop over obstacles
     %draw the main rectangle
     obst.rect(i)=rectangle('Position',[obst_cen_rec(i,1,1)-(const.size_obst)/2,obst_cen_rec(i,2,1)-...
         (const.size_obst)/2,const.size_obst,const.size_obst],'Curvature',...
         [obst.curvature,obst.curvature],'FaceColor',obst.color);
     %draw the side rectangles if needed
     if obst_cen_rec(i,1,1)+const.size_obst/2>ngridpoints %overlaps right edge
         obst.rect_hor(i)=rectangle('Position',[obst_cen_rec(i,1,1)-ngridpoints-...
             (const.size_obst)/2,obst_cen_rec(i,2,1)-...
             (const.size_obst)/2,const.size_obst,const.size_obst],'Curvature',...
             [obst.curvature,obst.curvature],'FaceColor',obst.color);
     elseif obst_cen_rec(i,1,1)-const.size_obst/2<1; %left edge
         obst.rect_hor(i)=rectangle('Position',[obst_cen_rec(i,1,1)+ngridpoints-...
             (const.size_obst)/2,obst_cen_rec(i,2,1)-...
             (const.size_obst)/2,const.size_obst,const.size_obst],'Curvature',...
             [obst.curvature,obst.curvature],'FaceColor',obst.color);
     end
     if obst_cen_rec(i,2,1)+const.size_obst/2>ngridpoints %top edge
         obst.rect_ver(i)=rectangle('Position',[obst_cen_rec(i,1,1)-...
             (const.size_obst)/2,obst_cen_rec(i,2,1)-ngridpoints-(const.size_obst)/2,...
             const.size_obst,const.size_obst],'Curvature',...
             [obst.curvature,obst.curvature],'FaceColor',obst.color);
     elseif obst_cen_rec(i,2,1)-const.size_obst/2<1; %bottom edge
         obst.rect_ver(i)=rectangle('Position',[obst_cen_rec(i,1,1)-...
             (const.size_obst)/2,obst_cen_rec(i,2)+ngridpoints-(const.size_obst)/2,...
             const.size_obst,const.size_obst],'Curvature',...
             [obst.curvature,obst.curvature],'FaceColor',obst.color);
     end
end
for i=1:n.tracer %loop over tracers
     %draw the main rectangle
     tracer.rect(i)=rectangle('Position',[tracer_cen_rec(i,1,1)-(const.size_tracer)/2,tracer_cen_rec(i,2,1)-...
         (const.size_tracer)/2,const.size_tracer,const.size_tracer],'Curvature',...
         [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
     %draw the side rectangles if needed
     if tracer_cen_rec(i,1,1)+const.size_tracer/2>ngridpoints %overlaps right edge
         tracer.rect_hor(i)=rectangle('Position',[tracer_cen_rec(i,1,1)-ngridpoints-...
             (const.size_tracer)/2,tracer_cen_rec(i,2,1)-...
             (const.size_tracer)/2,const.size_tracer,const.size_tracer],'Curvature',...
             [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
     elseif tracer_cen_rec(i,1,1)-const.size_tracer/2<1; %left edge
         tracer.rect_hor(i)=rectangle('Position',[tracer_cen_rec(i,1,1)+ngridpoints-...
             (const.size_tracer)/2,tracer_cen_rec(i,2,1)-...
             (const.size_tracer)/2,const.size_tracer,const.size_tracer],'Curvature',...
             [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
     end
     if tracer_cen_rec(i,2,1)+const.size_tracer/2>ngridpoints %top edge
         tracer.rect_ver(i)=rectangle('Position',[tracer_cen_rec(i,1,1)-...
             (const.size_tracer)/2,tracer_cen_rec(i,2,1)-ngridpoints-(const.size_tracer)/2,...
             const.size_tracer,const.size_tracer],'Curvature',...
             [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
     elseif tracer_cen_rec(i,2,1)-const.size_tracer/2<1; %bottom edge
         tracer.rect_ver(i)=rectangle('Position',[tracer_cen_rec(i,1,1)-...
             (const.size_tracer)/2,tracer_cen_rec(i,2)+ngridpoints-(const.size_tracer)/2,...
             const.size_tracer,const.size_tracer],'Curvature',...
             [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
     end
end    
  
%%
for j = 1:timestep:const.ntimesteps;
    for i=1:n.tracer %loop over tracers
        %turn off the side rectangles if they are present
        if isfield(tracer,'rect_hor') %horizontal rectangles are present
            if length(tracer.rect_hor)>=i && ~isempty(fieldnames(get(tracer.rect_hor(i)))) %h rect is present
                %make the rectangle invisible
                tracer.rect_hor(i).Visible='off';
            end
        end
        if isfield(tracer,'rect_ver'); %vertical rectangles are present
            if length(tracer.rect_ver)>=i && ~isempty(fieldnames(get(tracer.rect_ver(i)))) %v rect is present
                %make the rectangle invisible
                tracer.rect_ver(i).Visible='off';
            end
        end
        %update the main rectangle
        tracer.rect(i).Position(1)=tracer_cen_rec(i,1,j)-(const.size_tracer)/2;
        tracer.rect(i).Position(2)=tracer_cen_rec(i,2,j)-(const.size_tracer)/2;
        %draw the side rectangles if needed
        if tracer_cen_rec(i,1,j)+const.size_tracer/2>ngridpoints %overlaps right edge
            tracer.rect_hor(i)=rectangle('Position',[tracer_cen_rec(i,1,j)-ngridpoints-...
                (const.size_tracer)/2,tracer_cen_rec(i,2,j)-...
                (const.size_tracer)/2,const.size_tracer,const.size_tracer],'Curvature',...
                [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
        elseif tracer_cen_rec(i,1,j)-const.size_tracer/2<1; %left edge
            tracer.rect_hor(i)=rectangle('Position',[tracer_cen_rec(i,1,j)+ngridpoints-...
                (const.size_tracer)/2,tracer_cen_rec(i,2,j)-...
                (const.size_tracer)/2,const.size_tracer,const.size_tracer],'Curvature',...
                [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
        end
        if tracer_cen_rec(i,2,j)+const.size_tracer/2>ngridpoints %top edge
            tracer.rect_ver(i)=rectangle('Position',[tracer_cen_rec(i,1,j)-...
                (const.size_tracer)/2,tracer_cen_rec(i,2,j)-ngridpoints-(const.size_tracer)/2,...
                const.size_tracer,const.size_tracer],'Curvature',...
                [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
        elseif tracer_cen_rec(i,2,j)-const.size_tracer/2<1; %bottom edge
            tracer.rect_ver(i)=rectangle('Position',[tracer_cen_rec(i,1,j)-...
                (const.size_tracer)/2,tracer_cen_rec(i,2)+ngridpoints-(const.size_tracer)/2,...
                const.size_tracer,const.size_tracer],'Curvature',...
                [tracer.curvature,tracer.curvature],'FaceColor',tracer.color);
        end
    end
%     h=text(xtext,ytext,['Time=',num2str((j-1)*const.delta_t)],'FontSize',12);
   frame = getframe(hfig);
   writeVideo(writerObj,frame);
end

close(writerObj);

 